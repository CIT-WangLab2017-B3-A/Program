#!/usr/bin/env python

import rospy
import math
import time
from std_msgs.msg import Int32
from std_msgs.msg import String
from geometry_msgs.msg import Pose2D

from std_srvs.srv import Empty
from tobita_pkg.srv import setPose
from tobita_pkg.srv import setPoseResponse

import sys
from move import move

STEP_LENGTH = 195
STEP_ANGLE = 16

class Control:
    def __init__(self):
        self.fg = 0
        self.action = str()
        self.pose = Pose2D()
    
    def handle_service(self,data):
        rospy.loginfo("called!")
        self.fg = 1
        self.action = data.action
        self.pose = data.pose_data
        return setPoseResponse()

    def callback(data):
        self.pose = data.data

    def ahead(self,value):
        n = int(value // STEP_LENGTH) + 1
        servo = move()
        print "ahead :",value
        for i in xrange(n):
            for j in xrange(24):
                temp_str = 'slowwalk/test' + str(j) + '.csv'
                if i == (n - 1):
                    if (value - ((n-1) * STEP_LENGTH)) < (STEP_LENGTH*j/24):
                        break
                servo.Action(temp_str,0.01)
        servo.Close()

    def turn_right(self,value):
        n = int(value // STEP_ANGLE) + 1
        servo = move()
        print "right : ",value
        for i in xrange(n):
            for j in xrange(16):
                temp_str = 'turn_right/test' + str(j) + '.csv'
                if i == (n - 1):
                    if (value - ((n-1) * STEP_ANGLE)) < (STEP_ANGLE*j/16):
                        break
                servo.Action(temp_str,0.01)
        servo.Close()

    def turn_left(self,value):
        n = int(value // STEP_ANGLE) + 1
        servo = move()
        print "left : ",value
        for i in xrange(n):
            for j in xrange(16):
                temp_str = 'turn_left/test' + str(j) + '.csv'
                if i == (n - 1):
                    if (value - ((n-1) * STEP_ANGLE)) < (STEP_ANGLE*j/16):
                        break
                servo.Action(temp_str,0.01)
        servo.Close()

    def ball_catch(self):
        servo = move()
        servo.Action('Ball/BallCatch.csv',1.0)
        servo.Close()

    def call_service(self):
        print "test"
        rospy.wait_for_service("end_call")
        try:
            service = rospy.ServiceProxy("end_call",Empty)
            response = service()
        except rospy.ServiceException,e:
            print "Service call failed: %s"%e

    def main_loop(self):
        rospy.init_node("control", anonymous=True)
        rospy.Subscriber("/tobita/Pose",Pose2D,self.callback)
        s = rospy.Service("calling",setPose,self.handle_service)
        rate = rospy.Rate(10)

        while not rospy.is_shutdown():
            if self.fg == 1:
                print self.action, self.pose
                '''
                if self.action == 'c':
                    self.ball_catch()
                if self.pose.x > 0:
                    self.ahead(1000 * self.pose.x)
                if self.pose.theta > 0:
                    self.turn_left(self.pose.theta)
                if self.pose.theta < 0:
                    self.turn_right(self.pose.theta)
                '''
                time.sleep(1)
                self.call_service()
                self.fg = 0
            rate.sleep()

if __name__ == "__main__":
    control = Control()
    control.main_loop()
